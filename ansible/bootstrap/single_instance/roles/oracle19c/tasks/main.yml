- name: create the oracle installation path
  file:
    mode: 0755
    path: "{{ oracle_path }}"
    state: directory
    group: "{{ oracle_group }}"
    owner: "{{ oracle_user }}"

- name: set oracle user environment
  lineinfile: dest=/home/{{ oracle_user }}/.bashrc state=present line="{{ item }}"
  with_items:
    - "export ORACLE_BASE={{ ora_user_env.ORACLE_BASE }}"
    - "export ORACLE_SID={{ ora_user_env.ORACLE_SID }}"
    - "export ORACLE_HOME={{ ora_user_env.ORACLE_HOME }}"
    - "export PATH=$PATH:$ORACLE_HOME/bin"
    - "export NLS_LANG={{ ora_user_env.NLS_LANG }}"

- name: disable firewalld
  systemd:
    name: firewalld
    state: stopped
    enabled: false

- name: disable transparent_hugepage
  replace:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX="(.*)"$'
    replace: 'GRUB_CMDLINE_LINUX="\1 transparent_hugepage=never"' 

- name: make grub.cfg
  command: grub2-mkconfig -o /boot/grub2/grub.cfg

- name: reboot
  shell: "sleep 5 && reboot"
  async: 1
  poll: 0

- name: wait for rebooting
  wait_for_connection: 
    connect_timeout: 5
    sleep: 5
    delay: 20
    timeout: 240

- name: check transparent_hugepage
  shell: "cat /sys/kernel/mm/transparent_hugepage/enabled"
  register: result_hugepage

- name: debug
  debug:
    var: result_hugepage

#- name: test transparent_hugepage is disabled
#  assert:
#    that:
#      - "result_hugepage.stdout == '[always] madvise never'"

#
# install Oracle Database software
#

- name: create the oracle installation path
  file:
    mode: 0755
    path: "{{ oracle_path }}"
    state: directory
    group: "{{ oracle_group }}"
    owner: "{{ oracle_user }}"

- name: create $ORACLE_HOME directory
  file:
    mode: 0755
    path: "{{ oracle_db_home }}"
    state: directory
    group: "{{ oracle_group }}"
    owner: "{{ oracle_user }}"

- name: create $ORACLE_HOME/patch directory
  file:
    mode: 0755
    path: "{{ oracle_db_home }}/patch"
    state: directory
    group: "{{ oracle_group }}"
    owner: "{{ oracle_user }}"

- block:
  - name: copy response file for silent install
    template:
      src: db_install.rsp.j2
      dest: /home/{{ oracle_user }}/db_install.rsp
  
  #- name: Copy oracle.zip file
  #  ansible.builtin.copy:
  #    src: LINUX.X64_193000_db_home.zip
  #    dest: /home/{{ oracle_user }}/LINUX.X64_193000_db_home.zip
  #    owner: oracle
  #    group: oinstall
  #    mode: '0644'
  - name: Download Oracle Linux Zip File
    ansible.builtin.get_url:
      url: https://oraclebinarysa.blob.core.windows.net/oracle/LINUX.X64_193000_db_home.zip?sp=r&st=2023-09-13T00:14:00Z&se=2025-07-12T08:14:00Z&spr=https&sv=2022-11-02&sr=b&sig=q6BVLxDZWn%2FkQsGTJ6yXjrejJSCZ00t4gO1tc4tIL3o%3D
      dest: /home/{{ oracle_user }}/LINUX.X64_193000_db_home.zip

  - name: Download Oracle Latest Patch
    ansible.builtin.get_url:
      url: https://oraclebinarysa.blob.core.windows.net/oracle/p35319490_190000_Linux-x86-64.zip?sp=r&st=2023-09-13T00:12:57Z&se=2025-02-06T09:12:57Z&spr=https&sv=2022-11-02&sr=b&sig=AlHJXCspMt2ajivjqiXiSzv40D%2B1SIPuSVyrJA8zjGI%3D
      dest: /home/{{ oracle_user }}/LINUX.X64_ltsp.zip

  - name: extract the installation media to $ORACLE_HOME
    unarchive:
      src: /home/oracle/LINUX.X64_193000_db_home.zip
      dest: "{{ oracle_db_home }}"
      remote_src: yes
  - name: extract the oracle patch media to $ORACLE_HOME/patch
    unarchive:
      src: /home/{{ oracle_user }}/LINUX.X64_ltsp.zip
      dest: "{{ oracle_db_home }}/patch"
      remote_src: yes

  - name: runInstaller      
    shell: echo "{{ oracle_pass_raw }}" | ./runInstaller -responseFile /home/{{ oracle_user }}/db_install.rsp -silent -applyRU {{ oracle_db_home }}/patch/{{ oracle_patch_number }}
    ignore_errors: yes
    args:
      chdir: "{{ oracle_db_home }}"

  become: yes
  become_user: "{{ oracle_user }}"
